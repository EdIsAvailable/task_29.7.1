/**
 * @file FineGrainedQueue.h
 * @brief Заголовочный файл для класса односвязного списка с мелкогранулярной блокировкой
 * @author Кushnir Eduard
 * @date 28-03-2025
 */

 #pragma once
 #include <mutex>
 
 /**
  * @brief Структура узла односвязного списка с мьютексом для мелкогранулярной блокировки
  */
 struct Node {
   int value;       /**< Значение, хранящееся в узле */
   Node* next;      /**< Указатель на следующий узел */
   std::mutex* node_mutex; /**< Мьютекс для защиты доступа к данному узлу */
   
   /**
    * @brief Конструктор узла
    * @param val Значение для хранения в узле
    */
   Node(int val);
   
   /**
    * @brief Деструктор узла, освобождает ресурсы мьютекса
    */
   ~Node();
 };
 
 /**
  * @brief Класс очереди с мелкогранулярной блокировкой
  * @details Реализует односвязный список с защитой от состояний гонки при параллельном доступе
  */
 class FineGrainedQueue {
 private:
   Node* head;         /**< Указатель на начало списка */
   std::mutex* queue_mutex; /**< Мьютекс для защиты доступа к голове списка */
 
 public:
   /**
    * @brief Конструктор по умолчанию
    */
   FineGrainedQueue();
   
   /**
    * @brief Деструктор, освобождает память, занятую узлами и мьютексом
    */
   ~FineGrainedQueue();
   
   /**
    * @brief Инициализация списка первым элементом
    * @param value Значение первого элемента
    */
   void initialize(int value);
 
   /**
    * @brief Вставка узла в середину или конец списка
    * @param value Значение для нового узла
    * @param pos Позиция вставки (после какого по счету элемента)
    * @details Если pos <= 0, вставка происходит после первого элемента.
    *          Если pos больше длины списка, вставка происходит в конец списка.
    *          Метод использует мелкогранулярную блокировку для безопасной параллельной работы.
    */
   void insertIntoMiddle(int value, int pos);
   
   /**
    * @brief Вывод содержимого списка в стандартный поток вывода
    */
   void printList();
 };
 